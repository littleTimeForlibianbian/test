<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.lixc.mapper.SysWorkMapper">
    <resultMap id="BaseResultMap" type="com.example.lixc.entity.SysWork">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="is_delete" jdbcType="CHAR" property="isDelete"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="is_normal" jdbcType="CHAR" property="isNormal"/>
        <result column="praise_num" jdbcType="INTEGER" property="praiseNum"/>
        <result column="comment_num" jdbcType="INTEGER" property="commentNum"/>
        <result column="create_by" jdbcType="INTEGER" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_by" jdbcType="INTEGER" property="updateBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <resultMap id="UserBackMap" type="com.example.lixc.vo.back.UserBack">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <id column="enable" jdbcType="VARCHAR" property="enable"/>
        <result column="location" jdbcType="VARCHAR" property="location"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="city" jdbcType="VARCHAR" property="city"/>
        <result column="nick_name" jdbcType="VARCHAR" property="nickName"/>
        <result column="real_name" jdbcType="VARCHAR" property="realName"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="painter" jdbcType="VARCHAR" property="painter"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <association property="userAttr" javaType="userAttr">
            <result property="id" column="id"/>
            <result property="userId" column="user_id"/>
            <result property="uHistory" column="u_history"/>
            <result property="website" column="website"/>
            <result property="headImage" column="head_image"/>
            <result property="createTime" column="create_time"/>
        </association>
        <collection property="tagList"
                    select="com.example.lixc.mapper.SysUserTagMapper.selectTagsByUserId"
                    javaType="java.util.ArrayList"
                    ofType="com.example.lixc.entity.Tag"
                    column="{userId=id}"/>
    </resultMap>
    <resultMap id="WorkBackMap" type="com.example.lixc.vo.back.WorkBack">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="is_delete" jdbcType="CHAR" property="isDelete"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="is_normal" jdbcType="CHAR" property="isNormal"/>
        <result column="praise_num" jdbcType="INTEGER" property="praiseNum"/>
        <result column="comment_num" jdbcType="INTEGER" property="commentNum"/>
        <result column="create_by" jdbcType="INTEGER" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_by" jdbcType="INTEGER" property="updateBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <!--        <association property="user" resultMap="com.example.lixc.mapper.UserMapper.UserBaseMap"/>-->
        <!--        <association property="userAttr" resultMap="com.example.lixc.mapper.UserAttrMapper.BaseResultMap"/>-->
        <collection property="dicts" column="id" ofType="com.example.lixc.entity.SysDict">
            <id column="sid" jdbcType="INTEGER" property="id"/>
            <result column="dict_key" jdbcType="VARCHAR" property="dictKey"/>
            <result column="dict_value" jdbcType="VARCHAR" property="dictValue"/>
            <result column="p_id" jdbcType="INTEGER" property="pId"/>
        </collection>
        <collection property="imageList" column="id" ofType="com.example.lixc.entity.SysImage">
            <id column="id" jdbcType="INTEGER" property="id"/>
            <result column="name" jdbcType="VARCHAR" property="name"/>
            <result column="url" jdbcType="VARCHAR" property="url"/>
            <result column="thumb_url" jdbcType="VARCHAR" property="thumbUrl"/>
            <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        </collection>
        <!-- 此种循环方式会先查询 work  然后再去查询 imageList  会发生两次查询-->
        <!--        <collection property="imageList" select="com.example.lixc.mapper.SysWorkImageMapper.selectImagesByWorkId"-->
        <!--                    column="${work_id = id}" fetchType="lazy" ofType="sysImage"/>-->
        <!--        <collection property="tags" select="com.example.lixc.mapper.SysWorkDictMapper.selectTagsByWork"-->
        <!--                    column="${work_id = id}" fetchType="lazy" ofType="sysDict"/>-->
    </resultMap>
    <sql id="Base_Column_List">
        swork.id, swork.user_id, swork.`status`, swork.is_delete,swork.is_normal, swork.`name`, swork.content,  swork.praise_num,
    swork.comment_num, swork.create_by, swork.update_by, swork.update_time,sd.id sid,
        sd.p_id,
        sd.dict_key,
        sd.dict_value,
        si.id siid,
        si.thumb_url ,
        si.url
    </sql>
    <select id="selectForList" resultMap="WorkBackMap" parameterType="com.example.lixc.vo.query.WorkQuery">
        select
        swork.id ,
        swork.user_id,
        swork.status,
        swork.is_delete,
        swork.name ,
        swork.content,
        sd.id sid,
        sd.p_id,
        sd.dict_key,
        sd.dict_value,
        si.id siid,
        si.thumb_url ,
        si.url
        <!-- # u.nick_name,-->
        <!--   # sua.head_image,-->
        <!-- # sua.website,-->
        <!--  # sua.u_history,-->
        <!-- # sua.id suaid-->
        from sys_work swork
        left join sys_work_image swi on swi.work_id = swork.id
        left join sys_image si on swi.image_id = si.id
        left join sys_work_dict swd on swd.work_id = swork.id
        left join sys_dict sd on swd.dict_id = sd.id
        <!--  left join sys_user u on swork.user_id = u.id -->
        <!-- left join sys_user_attr sua on u.id = sua.user_id -->
        where swork.is_delete='N'
        <!--  # and u.enable='Y'-->
        <if test="workQuery.id > 0">
            and swork.id = #{workQuery.id}
        </if>
        <if test="workQuery.userId > 0">
            and swork.user_id = #{workQuery.userId}
        </if>
        <if test="workQuery.status > 0">
            and swork.status = #{workQuery.status}
        </if>
        <!--        <if test="workQuery.userName!=null and workQuery.userName !=''">-->
        <!--            and (u.email = #{workQuery.userName} or u.nick_name=#{workQuery.userName})-->
        <!--        </if>-->
        <if test="workQuery.isNormal!=null and workQuery.isNormal !=''">
            and swork.is_normal = #{workQuery.isNormal}
        </if>
        <if test="workQuery.name!=null and workQuery.name !=''">
            and swork.name like concat('%',#{workQuery.name},'%')
        </if>
        <if test="workQuery.praiseNum > 0">
            and praise_num = #{workQuery.praiseNum}
        </if>
        order by swork.create_time desc
    </select>
    <select id="selectById" resultMap="WorkBackMap">
        select
        <include refid="Base_Column_List"/>,
        DATE_FORMAT(swork.create_time,'%Y-%m-%d') create_time
        from sys_work swork
        left join sys_user u on swork.user_id = u.id
        left join sys_work_image swi on swi.work_id = swork.id
        left join sys_image si on swi.image_id = si.id
        left join sys_work_dict swd on swd.work_id = swork.id
        left join sys_dict sd on swd.dict_id = sd.id
        left join sys_user_attr sua on u.id = sua.user_id
        where swork.is_delete='N'
        and swork.is_normal='Y'
        <if test="workId> 0">
            and swork.id = #{workId}
        </if>
    </select>

    <select id="selectOther" resultMap="WorkBackMap">
        select DISTINCT
        <include refid="Base_Column_List"/>
        from sys_work swork
        left join sys_user u on swork.user_id = u.id
        left join sys_work_image swi on swi.work_id = swork.id
        left join sys_image si on swi.image_id = si.id
        left join sys_work_dict swd on swd.work_id = swork.id
        left join sys_dict sd on swd.dict_id = sd.id
        left join sys_user_attr sua on u.id = sua.user_id
        <where>
            <if test="authorId > 0">
                and u.id = #{authorId}
            </if>
            <if test="workId > 0">
                and swork.id != #{workId}
            </if>
        </where>
    </select>
    <select id="selectUserInfoByWorkId" resultMap="UserBackMap">
        select su.nick_name, su.city, su.id, sua.head_image, sua.website, sua.u_history
        from sys_user su
                 left join sys_user_attr sua on su.id = sua.user_id
                 left join sys_work swork on swork.user_id = su.id
        where swork.id = #{workId}
    </select>
</mapper>